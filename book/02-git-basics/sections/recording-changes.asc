=== Merekaman Perubahan pada Repositori

Anda memiliki repositori Git yang tulen dan periksa atau salinlah file untuk project itu.
Anda perlu membuat beberapa perubahan dan commit snapshot perubahan tersebut ke dalam repositori Anda setiap kali project mencapai keadaan yang ingin Anda catat.

Remember that each file in your working directory can be in one of two states: tracked or untracked.
Tracked files are files that were in the last snapshot; they can be unmodified, modified, or staged.
Untracked files are everything else – any files in your working directory that were not in your last snapshot and are not in your staging area.
When you first clone a repository, all of your files will be tracked and unmodified because you just checked them out and haven't edited anything.
Ingat bahwa setiap file dalam direktori kerja Anda bisa berada di salah satu dari dua bagian berikut: dilacak atau tidak dilacak.
File yang dilacak adalah file yang ada di snapshot terakhir; mereka bisa dimodifikasi, tidak dimodifikasi, atau ditampilkan.
File yang tidak dilacak adalah file lainnya - file apa pun di direktori kerja Anda yang tidak ada dalam snapshot terakhir Anda dan tidak berada di area tampilan Anda.
Saat pertama kali menduplikat sebuah repositori, semua file Anda akan dilacak dan tidak dimodifikasi karena Anda baru saja memeriksanya dan belum mengubah apapun.

As you edit files, Git sees them as modified, because you've changed them since your last commit.
You stage these modified files and then commit all your staged changes, and the cycle repeats.
Saat Anda mengubah file, Git melihat mereka sebagai yang dimodifikasi, karena Anda telah mengubahnya sejak commit terakhir Anda.
Anda menampilkan file yang dimodifikasi ini dan kemudian meng-commit semua perubahan tampilan Anda, dan siklusnya berulang.

.Siklus hidup dari status file Anda.
image::images/lifecycle.png[Siklus hidup dari status file Anda.]

[[_checking_status]]
==== Memeriksa Status File Anda

The main tool you use to determine which files are in which state is the `git status` command.(((git commands, status)))
If you run this command directly after a clone, you should see something like this:
Alat utama yang Anda gunakan untuk menentukan file mana yang menjadi bagiannya adalah dengan command `git status`. (((git commands, status)))
Jika Anda menjalankan command ini langsung setelah menduplikat, Anda harus melihat sesuatu yang seperti ini:

[source,console]
----
$ git status
On branch master
nothing to commit, working directory clean
----

This means you have a clean working directory – in other words, there are no tracked and modified files.
Git also doesn't see any untracked files, or they would be listed here.
Finally, the command tells you which branch you're on and informs you that it has not diverged from the same branch on the server.
For now, that branch is always ``master'', which is the default; you won't worry about it here.
<<_git_branching>>  will go over branches and references in detail.
Ini berarti Anda memiliki direktori kerja yang bersih - dengan kata lain, tidak ada file yang dilacak dan dimodifikasi.
Git juga tidak melihat file yang tidak dilacak, atau mereka akan tercantum di sini.
Terakhir, command tersebut memberitahukan di branch mana Anda berada dan memberitahukan bahwa Anda belum menyimpang dari branch yang sama di server.
Untuk saat ini, branch tersebut akan selalu ``master``, yang merupakan default; Anda tidak perlu khawatir tentang hal ini.
<<_git_branching>> akan membahas branch dan referensi secara rinci.

Let's say you add a new file to your project, a simple README file.
If the file didn't exist before, and you run `git status`, you see your untracked file like so:
Misalkan Anda menambahkan file baru ke project Anda, sebuah file README yang sederhana.
Jika file tersebut tidak ada sebelumnya, dan Anda menjalankan `git status`, Anda melihat file yang tidak terlacak seperti ini:

[source,console]
----
$ echo 'My Project' > README
$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)

    README

nothing added to commit but untracked files present (use "git add" to track)
----

You can see that your new README file is untracked, because it's under the ``Untracked files'' heading in your status output.
Untracked basically means that Git sees a file you didn't have in the previous snapshot (commit); Git won't start including it in your commit snapshots until you explicitly tell it to do so.
It does this so you don't accidentally begin including generated binary files or other files that you did not mean to include.
You do want to start including README, so let's start tracking the file.
Dapat Anda lihat bahwa file README baru Anda tidak terlacak, karena berada di bawah file `Untracked files`` yang menuju output status Anda.
Tidak terlacak pada dasarnya berarti Git melihat file yang tidak Anda miliki di snapshot sebelumnya (commit); Git tidak akan memulai memasukkannya ke dalam snapshot commit Anda sampai Anda secara eksplisit memberitahukannya untuk melakukannya.
Hal ini dilakukan agar Anda tidak secara tidak sengaja memulai memasukkan file binary atau file lain yang tidak Anda maksudkan.
Anda ingin memulainya termasuk README, jadi mari kita mulai melacak file.

[[_tracking_files]]
==== Melacak File Baru

In order to begin tracking a new file, you use the command `git add`.(((git commands, add)))
To begin tracking the README file, you can run this:
Untuk memulai melacak file baru, Anda menggunakan perintah `git add`. (((git commands, add)))
Untuk memulai melacak file README, Anda dapat menjalankan ini:

[source,console]
----
$ git add README
----

If you run your status command again, you can see that your README file is now tracked and staged to be committed:
Jika Anda menjalankan command status Anda lagi, Anda dapat melihat bahwa file README Anda sekarang dilacak dan ditampilkan untuk di-commitkan:

[source,console]
----
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

----

You can tell that it's staged because it's under the ``Changes to be committed'' heading.
If you commit at this point, the version of the file at the time you ran `git add` is what will be in the historical snapshot.
You may recall that when you ran `git init` earlier, you then ran `git add (files)` – that was to begin tracking files in your directory.(((git commands, init)))(((git commands, add)))
The `git add` command takes a path name for either a file or a directory; if it's a directory, the command adds all the files in that directory recursively.
Anda dapat mengetahui bahwa itu ditampilkan karena berada di bawah judul "Perubahan yang akan ditampilkan".
Jika Anda meng-commit saat ini, versi file pada saat Anda menjalankan `git add` adalah apa yang ada dalam histori snapshot.
Anda mungkin ingat bahwa ketika Anda menjalankan `git init` sebelumnya, kemudian Anda menjalankan `git add (files)`- yaitu mulai melacak file di direktori Anda.(((git commands, init)))(((git commands, add)))
Perintah `git add` mengambil nama path untuk file atau direktori; Jika itu adalah sebuah direktori, perintah tersebut menambahkan semua file dalam direktori itu secara rekursif.

==== Menampilkan File yang Dirubah

Let's change a file that was already tracked.
If you change a previously tracked file called ``CONTRIBUTING.md'' and then run your `git status` command again, you get something that looks like this:
Mari kita ubah file yang sudah dilacak.
Jika Anda mengubah file yang sebelumnya dilacak yang disebut ``CONTRIBUTING.md'' kemudian jalankan perintah `git status` Anda lagi, Anda mendapatkan sesuatu yang terlihat seperti ini:

[source,console]
----
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

The ``CONTRIBUTING.md'' file appears under a section named ``Changed but not staged for commit'' – which means that a file that is tracked has been modified in the working directory but not yet staged.
To stage it, you run the `git add` command. `git add` is a multipurpose command – you use it to begin tracking new files, to stage files, and to do other things like marking merge-conflicted files as resolved. It may be helpful to think of it more as ``add this content to the next commit'' rather than ``add this file to the project''.(((git commands, add)))
Let's run `git add` now to stage the ``CONTRIBUTING.md'' file, and then run `git status` again:
File ``CONTRIBUTING.md`` muncul di bawah bagian yang bernama ``Berubah tapi tidak ditampilkan untuk di-commitkan`` - yang berarti bahwa file yang dilacak telah dimodifikasi dalam direktori kerja namun belum ditampilkan.
Untuk menampilkannya, Anda perlu menjalankan command `git add`. `git add` adalah command serbaguna - Anda menggunakannya untuk memulai melacak file baru, menampilkan file, dan melakukan hal-hal lain seperti menandai file yang salah di-merge menjadi teratasi. Akan sangat membantu jika menganggapnya sebagai ``tambahkan konten ini ke commit berikutnya`` daripada ``tambahkan file ini ke proyek``. (((git commands, add)))
Mari jalankan `git add` sekarang menuju stage file``CONTRIBUTING.md``, kemudian jalankan `git status` lagi:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

----

Both files are staged and will go into your next commit.
At this point, suppose you remember one little change that you want to make in `CONTRIBUTING.md` before you commit it.
You open it again and make that change, and you're ready to commit.
However, let's run `git status` one more time:
File both ditampilkan dan akan masuk ke commit berikutnya.
Pada poin ini, misalkan Anda ingat satu perubahan kecil yang ingin Anda buat di `CONTRIBUTING.md` sebelum Anda menghubunginya.
Bukalah kembali dan buatlah file itu berubahan, kemudian Anda siap untuk meng-commitnya.
Sebelumnya, mari kita jalankan `git status` sekali lagi:

[source,console]
----
$ vim CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

What the heck?
Now `CONTRIBUTING.md` is listed as both staged _and_ unstaged.
How is that possible?
It turns out that Git stages a file exactly as it is when you run the `git add` command.
If you commit now, the version of `CONTRIBUTING.md` as it was when you last ran the `git add` command is how it will go into the commit, not the version of the file as it looks in your working directory when you run `git commit`.
If you modify a file after you run `git add`, you have to run `git add` again to stage the latest version of the file:
Apa apaan?
Sekarang `CONTRIBUTING.md` terdaftar sebagai stage _dan_ unstaged.
Bagaimana mungkin?
Ternyata Git memprogram sebuah file persis seperti saat Anda menjalankan perintah `git add`.
Jika Anda melakukannya sekarang, versi `CONTRIBUTING.md` seperti saat Anda terakhir menjalankan perintah `git add` adalah bagaimana ia akan masuk ke commit, bukan versi file seperti yang terlihat di direktori kerja Anda saat Anda jalankan `git commit`.
Jika Anda memodifikasi file setelah menjalankan `git add`, Anda harus menjalankan `git add` lagi untuk menampilkan versi terbaru dari file:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md
----

==== Status Pendek

While the `git status` output is pretty comprehensive, it's also quite wordy. Git also has a short status flag so you can see your changes in a more compact way. If you run `git status -s` or `git status --short` you get a far more simplified output from the command.
Selagi output `git status` cukup komprehensif, ini akan membingungkan. Git juga memiliki flag status pendek sehingga Anda bisa melihat perubahan Anda dengan cara yang lebih kompak. Jika Anda menjalankan `git status -s` atau `git status --short` Anda mendapatkan hasil yang jauh lebih sederhana dari command.


[source,console]
----
$ git status -s
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
----

New files that aren't tracked have a `??` next to them, new files that have been added to the staging area have an `A`, modified files have an `M` and so on. There are two columns to the output - the left hand column indicates that the file is staged and the right hand column indicates that it's modified.  So for example in that output, the `README` file is modified in the working directory but not yet staged, while the `lib/simplegit.rb` file is modified and staged. The `Rakefile` was modified, staged and then modified again, so there are changes to it that are both staged and unstaged.
File baru yang tidak dilacak memiliki `??` di sampingnya, file baru yang telah ditambahkan ke area stage memiliki tanda `A` (Added), dan file yang dimodifikasi memiliki `M` (Modified) dan sebagainya. Ada dua kolom pada output - kolom sebelah kiri menunjukkan bahwa file sudah ditampilkan dan kolom sebelah kanan menunjukkan bahwa itu sudah dimodifikasi. Jadi misalnya pada output itu, file `README` dimodifikasi di direktori kerja tapi belum ditampilkan, sedangkan file `lib/simplegit.rb` telah dimodifikasi dan ditampilkan. `Rakefile` sudah dimodifikasi, ditampilkan lalu dimodifikasi lagi, jadi ada perubahan pada keduanya yang ditampilkan dan tidak ditampilkan.

[[_ignoring]]
==== Mengabaikan File

Often, you'll have a class of files that you don't want Git to automatically add or even show you as being untracked.
These are generally automatically generated files such as log files or files produced by your build system.
In such cases, you can create a file listing patterns to match them named `.gitignore`.(((ignoring files)))
Here is an example `.gitignore` file:
Seringkali, Anda akan memiliki kelas file yang Anda tidak ingin Git menambahkan atau bahkan menunjukkannya sebagai tidak terlacak secara otomatis.
Umumnya file yang dibuat secara otomatis ini seperti file log atau file yang dihasilkan oleh sistem build Anda.
Dalam kasus seperti ini, Anda dapat membuat pola daftar file agar sesuai dengan nama mereka `.gitignore`.(((ignoring files)))
Berikut adalah contoh `.gitignore` file:

[source,console]
----
$ cat .gitignore
*.[oa]
*~
----

The first line tells Git to ignore any files ending in ``.o'' or ``.a'' – object and archive files that may be the product of building your code.
The second line tells Git to ignore all files that end with a tilde (`~`), which is used by many text editors such as Emacs to mark temporary files.
You may also include a log, tmp, or pid directory; automatically generated documentation; and so on.
Setting up a `.gitignore` file before you get going is generally a good idea so you don't accidentally commit files that you really don't want in your Git repository.
Baris pertama memberitahu Git untuk mengabaikan file yang berakhiran ``.o`` atau ``.a`` - objek dan arsip file yang mungkin merupakan produk dari pembuatan kode Anda.
Baris kedua memberitahu Git untuk mengabaikan semua file yang diakhiri dengan tilde (`~`), yang digunakan oleh banyak editor teks seperti Emacs untuk menandai file sementara.
Anda mungkin juga menyertakan direktori log, tmp, atau pid; dokumentasi yang dihasilkan secara otomatis; dan seterusnya.
Menyiapkan file `.gitignore` sebelum Anda memulai umumnya adalah ide bagus, dimana ketika Anda tidak sengaja meng-commit file yang sebenarnya tidak ingin Anda commit di repositori Git Anda.

The rules for the patterns you can put in the `.gitignore` file are as follows:
Aturan untuk pola yang dapat Anda masukkan ke dalam file `gitignore` adalah sebagai berikut:

*  Blank lines or lines starting with `#` are ignored.
*  Standard glob patterns work.
*  You can end patterns with a forward slash (`/`) to specify a directory.
*  You can negate a pattern by starting it with an exclamation point (`!`).
*  Garis kosong atau garis yang diawali dengan `#` akan diabaikan.
*  Standar pola glob bekerja.
*  Anda bisa mengakhiri pola dengan garis miring (`/`) untuk menentukan direktori.
*  Anda bisa meniadakan sebuah pola dengan memulainya dengan tanda seru (`!`).

Glob patterns are like simplified regular expressions that shells use.
An asterisk (`*`) matches zero or more characters; `[abc]` matches any character inside the brackets (in this case a, b, or c); a question mark (`?`) matches a single character; and brackets enclosing characters separated by a hyphen(`[0-9]`) matches any character between them (in this case 0 through 9).
You can also use two asterisks to match nested directories; `a/**/z` would match `a/z`, `a/b/z`, `a/b/c/z`, and so on.
Pola Glob seperti ekspresi reguler sederhana yang digunakan shell.
Tanda asterisk (`*`) cocok dengan karakter nol atau lebih; `[abc]` cocok dengan karakter apa pun di dalam tanda kurung (dalam hal ini a, b, atau c); tanda tanya (`?`) cocok dengan satu karakter; dan tanda kurung yang menyertakan karakter yang dipisahkan oleh tanda hubung (`[0-9]`) cocok dengan karakter di antara keduanya (dalam hal ini 0 sampai 9).
Anda juga dapat menggunakan dua tanda bintang untuk mencocokkan sekumpulan direktori; `a/**/z` akan cocok dengan `a/z`, `a/b/z`, `a/b/c/z`, dan seterusnya.

Here is another example .gitignore file:
Berikut adalah contoh lain file .gitignore:

[source]
----
# no .a files
*.a

# but do track lib.a, even though you're ignoring .a files above
!lib.a

# only ignore the root TODO file, not subdir/TODO
/TODO

# ignore all files in the build/ directory
build/

# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

# ignore all .txt files in the doc/ directory
doc/**/*.txt
----

[TIPS]
====
GitHub mempertahankan daftar file `gitHoreignore` yang cukup lengkap untuk puluhan proyek dan bahasa di https://github.com/github/gitignore[] jika Anda menginginkan titik awal untuk project Anda.
====

[[_git_diff_staged]]
==== Viewing Your Staged and Unstaged Changes

If the `git status` command is too vague for you – you want to know exactly what you changed, not just which files were changed – you can use the `git diff` command.(((git commands, diff)))
We'll cover `git diff` in more detail later, but you'll probably use it most often to answer these two questions: What have you changed but not yet staged?
And what have you staged that you are about to commit?
Although `git status` answers those questions very generally by listing the file names, `git diff` shows you the exact lines added and removed – the patch, as it were.

Let's say you edit and stage the `README` file again and then edit the `CONTRIBUTING.md` file without staging it.
If you run your `git status` command, you once again see something like this:

[source,console]
----
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

To see what you've changed but not yet staged, type `git diff` with no other arguments:

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 3cb747f..e445e28 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -36,6 +36,10 @@ def main
           @commit.parents[0].parents[0].parents[0]
         end

+        run_code(x, 'commits 1') do
+          git.commits.size
+        end
+
         run_code(x, 'commits 2') do
           log = git.commits('master', 15)
           log.size
----

That command compares what is in your working directory with what is in your staging area.
The result tells you the changes you've made that you haven't yet staged.

If you want to see what you've staged that will go into your next commit, you can use `git diff --staged`.
This command compares your staged changes to your last commit:

[source,console]
----
$ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1,4 @@
+My Project
+
+ This is my project and it is amazing.
+
----

It's important to note that `git diff` by itself doesn't show all changes made since your last commit – only changes that are still unstaged.
This can be confusing, because if you've staged all of your changes, `git diff` will give you no output.

For another example, if you stage the `CONTRIBUTING.md` file and then edit it, you can use `git diff` to see the changes in the file that are staged and the changes that are unstaged. If our environment looks like this:

[source,console]
----
$ git add CONTRIBUTING.md
$ echo '# test line' >> CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Now you can use `git diff` to see what is still unstaged

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index e445e28..86b2f7c 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -127,3 +127,4 @@ end
 main()

 ##pp Grit::GitRuby.cache_client.stats
+# test line
----

and `git diff --cached` to see what you've staged so far:

[source,console]
----
$ git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 3cb747f..e445e28 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -36,6 +36,10 @@ def main
          @commit.parents[0].parents[0].parents[0]
        end

+        run_code(x, 'commits 1') do
+          git.commits.size
+        end
+
        run_code(x, 'commits 2') do
          log = git.commits('master', 15)
          log.size
----

[[_git_difftool]]
[NOTE]
.Git Diff in an External Tool
====
We will continue to use the `git diff` command in various ways throughout the rest of the book. There is another way to look at these diffs if you prefer a graphical or external diff viewing program instead. If you run `git difftool` instead of `git diff`, you can view any of these diffs in software like Araxis, emerge, vimdiff and more. Run `git difftool --tool-help` to see what is available on your system.
====

[[_committing_changes]]
==== Committing Your Changes

Now that your staging area is set up the way you want it, you can commit your changes.
Remember that anything that is still unstaged – any files you have created or modified that you haven't run `git add` on since you edited them – won't go into this commit.
They will stay as modified files on your disk.
In this case, let's say that the last time you ran `git status`, you saw that everything was staged, so you're ready to commit your changes.(((git commands, status)))
The simplest way to commit is to type `git commit`:(((git commands, commit)))

[source,console]
----
$ git commit
----

Doing so launches your editor of choice.
(This is set by your shell's `$EDITOR` environment variable – usually vim or emacs, although you can configure it with whatever you want using the `git config --global core.editor` command as you saw in <<_getting_started>>).(((editor, changing default)))(((git commands, config)))

The editor displays the following text (this example is a Vim screen):

[source]
----

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
".git/COMMIT_EDITMSG" 9L, 283C
----

You can see that the default commit message contains the latest output of the `git status` command commented out and one empty line on top.
You can remove these comments and type your commit message, or you can leave them there to help you remember what you're committing.
(For an even more explicit reminder of what you've modified, you can pass the `-v` option to `git commit`.
Doing so also puts the diff of your change in the editor so you can see exactly what changes you're committing.)
When you exit the editor, Git creates your commit with that commit message (with the comments and diff stripped out).

Alternatively, you can type your commit message inline with the `commit` command by specifying it after a -m flag, like this:

[source,console]
----
$ git commit -m "Story 182: Fix benchmarks for speed"
[master 463dc4f] Story 182: Fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README
----

Now you've created your first commit!
You can see that the commit has given you some output about itself: which branch you committed to (`master`), what SHA-1 checksum the commit has (`463dc4f`), how many files were changed, and statistics about lines added and removed in the commit.

Remember that the commit records the snapshot you set up in your staging area.
Anything you didn't stage is still sitting there modified; you can do another commit to add it to your history.
Every time you perform a commit, you're recording a snapshot of your project that you can revert to or compare to later.

==== Skipping the Staging Area

(((staging area, skipping)))
Although it can be amazingly useful for crafting commits exactly how you want them, the staging area is sometimes a bit more complex than you need in your workflow.
If you want to skip the staging area, Git provides a simple shortcut.
Adding the `-a` option to the `git commit` command makes Git automatically stage every file that is already tracked before doing the commit, letting you skip the `git add` part:

[source,console]
----
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

no changes added to commit (use "git add" and/or "git commit -a")
$ git commit -a -m 'added new benchmarks'
[master 83e38c7] added new benchmarks
 1 file changed, 5 insertions(+), 0 deletions(-)
----

Notice how you don't have to run `git add` on the ``CONTRIBUTING.md'' file in this case before you commit.

[[_removing_files]]
==== Removing Files

(((files, removing)))
To remove a file from Git, you have to remove it from your tracked files (more accurately, remove it from your staging area) and then commit.
The `git rm` command does that, and also removes the file from your working directory so you don't see it as an untracked file the next time around.

If you simply remove the file from your working directory, it shows up under the ``Changed but not updated'' (that is, _unstaged_) area of your `git status` output:

[source,console]
----
$ rm grit.gemspec
$ git status
On branch master
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    deleted:    grit.gemspec

no changes added to commit (use "git add" and/or "git commit -a")
----

Then, if you run `git rm`, it stages the file's removal:

[source,console]
----
$ git rm grit.gemspec
rm 'grit.gemspec'
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    deleted:    grit.gemspec
----

The next time you commit, the file will be gone and no longer tracked.
If you modified the file and added it to the index already, you must force the removal with the `-f` option.
This is a safety feature to prevent accidental removal of data that hasn't yet been recorded in a snapshot and that can't be recovered from Git.

Another useful thing you may want to do is to keep the file in your working tree but remove it from your staging area.
In other words, you may want to keep the file on your hard drive but not have Git track it anymore.
This is particularly useful if you forgot to add something to your `.gitignore` file and accidentally staged it, like a large log file or a bunch of `.a` compiled files.
To do this, use the `--cached` option:

[source,console]
----
$ git rm --cached README
----

You can pass files, directories, and file-glob patterns to the `git rm` command.
That means you can do things such as

[source,console]
----
$ git rm log/\*.log
----

Note the backslash (`\`) in front of the `*`.
This is necessary because Git does its own filename expansion in addition to your shell's filename expansion.
This command removes all files that have the `.log` extension in the `log/` directory.
Or, you can do something like this:

[source,console]
----
$ git rm \*~
----

This command removes all files that end with `~`.

[[_git_mv]]
==== Moving Files

(((files, moving)))
Unlike many other VCS systems, Git doesn't explicitly track file movement.
If you rename a file in Git, no metadata is stored in Git that tells it you renamed the file.
However, Git is pretty smart about figuring that out after the fact – we'll deal with detecting file movement a bit later.

Thus it's a bit confusing that Git has a `mv` command.
If you want to rename a file in Git, you can run something like

[source,console]
----
$ git mv file_from file_to
----

and it works fine.
In fact, if you run something like this and look at the status, you'll see that Git considers it a renamed file:

[source,console]
----
$ git mv README.md README
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
----

However, this is equivalent to running something like this:

[source,console]
----
$ mv README.md README
$ git rm README.md
$ git add README
----

Git figures out that it's a rename implicitly, so it doesn't matter if you rename a file that way or with the `mv` command.
The only real difference is that `mv` is one command instead of three – it's a convenience function.
More important, you can use any tool you like to rename a file, and address the add/rm later, before you commit.
