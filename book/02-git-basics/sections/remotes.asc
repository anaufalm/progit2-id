[[_remote_repos]]
=== Bekerja dengan Remote

Untuk dapat berkolaborasi pada proyek Git, anda perlu tahu bagaimana untuk mengelola repositori remote.
Remote repositori adalah versi dari proyek anda yang di-host pada Internet atau jaringan di suatu tempat.
Anda dapat memiliki beberapa dari mereka, masing-masing yang pada umumnya lebih baik baca-saja atau membaca/menulis untuk anda.
Berkolaborasi dengan orang lain ini melibatkan mengelola repositori remote dan mendorong dan menarik data ke dan dari mereka ketika anda perlu untuk berbagi pekerjaan.
Mengelola repositori remote termasuk mengetahui bagaimana untuk menambahkan repositori remote, remote menghapus yang tidak lagi berlaku, mengelola berbagai macam remote cabang dan mendefinisikan mereka sebagai dilacak atau tidak, dan banyak lagi.
Di bagian ini, kita akan membahas beberapa remote-keterampilan manajemen.

==== Menampilkan Remote Anda

Untuk melihat remote server anda telah dikonfigurasi, anda dapat menjalankan `git remote` perintah.(((git perintah, remote)))
Ini daftar shortnames dari masing-masing remote menangani anda sudah ditentukan.
Jika anda sudah kloning repositori anda, anda setidaknya harus melihat asal – yang merupakan nama default Git memberikan ke server anda kloning dari:

[source,console]
----
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin
----

Anda juga dapat menentukan `-v`, yang berisi Url yang Git telah disimpan untuk nama pendek yang akan digunakan ketika membaca dan menulis untuk yang jarak jauh:

[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----

Jika anda memiliki lebih dari satu remote, perintah daftar mereka semua.
Sebagai contoh, sebuah repositori dengan beberapa remote untuk bekerja dengan beberapa kolaborator mungkin terlihat seperti ini.

[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----

Ini berarti kita dapat menarik iuran dari setiap pengguna ini cukup mudah. Kita mungkin juga memiliki izin untuk mendorong salah satu atau lebih dari ini, meskipun kita tidak bisa mengatakan itu di sini.

Perhatikan bahwa remote ini menggunakan berbagai protokol; kita akan bahas lebih lanjut tentang ini di <<_git_on_the_server>>.

==== Menambahkan Repositori Remote

Sudah saya sampaikan dan diberikan beberapa demonstrasi menambahkan repositori remote pada bagian sebelumnya, tetapi di sini adalah bagaimana untuk melakukan hal ini secara eksplisit.(((git perintah, remote)))
Untuk menambahkan baru remote repositori Git sebagai nama pendek anda dapat referensi dengan mudah, jalankan `git remote add [shortname] [url]`:

[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----

Sekarang anda dapat menggunakan string `pb` pada command line sebagai pengganti seluruh URL.
Misalnya, jika anda ingin mengambil semua informasi yang Paulus memiliki tetapi anda belum memiliki dalam repositori anda, anda dapat menjalankan `git fetch pb`:

[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
----

Paulus cabang master sekarang dapat diakses secara lokal sebagai `pb/master` – anda dapat bergabung ke salah satu dari cabang-cabang, atau anda dapat memeriksa sebuah cabang lokal pada saat itu, jika anda ingin memeriksa.
(Kita akan pergi ke apa yang cabang dan bagaimana menggunakannya dalam jauh lebih detail dalam <<_git_branching>>.)

[[_fetching_and_pulling]]
==== Mengambil dan Menarik dari Remote Anda

Seperti yang kamu lihat, untuk mendapatkan data dari proyek-proyek yang terpencil, anda dapat menjalankan:(((git perintah, mengambil)))

[source,console]
----
$ git fetch [remote-name]
----

Perintah keluar untuk remote proyek dan menarik ke bawah semua data dari remote proyek yang anda belum memiliki.
Setelah anda melakukan ini, anda harus memiliki referensi untuk semua cabang dari remote, yang dapat anda menggabungkan atau memeriksa sewaktu-waktu.

Jika anda menduplikasi sebuah repositori, perintah secara otomatis menambahkan bahwa remote repository dengan nama `asal".
Jadi, `git fetch asal` menjemput setiap pekerjaan baru yang telah didorong ke server karena anda kloning (atau terakhir diambil dari).
Hal ini penting untuk dicatat bahwa `git fetch` perintah menarik data ke repositori lokal anda – itu tidak otomatis bergabung dengan pekerjaan anda atau mengubah apa yang sedang anda kerjakan saat ini.
Anda harus menggabungkan secara manual ke dalam pekerjaan anda ketika anda siap.

Jika anda memiliki cabang diatur untuk melacak remote branch (lihat bagian berikutnya dan <<_git_branching>> untuk informasi lebih lanjut), anda dapat menggunakan git pull` perintah untuk secara otomatis mengambil dan kemudian menggabungkan remote cabang ke anda saat ini cabang.(((git perintah, tarik)))
Ini mungkin lebih mudah atau lebih nyaman alur kerja untuk anda, dan secara default, `git clone` perintah secara otomatis set up cabang master lokal untuk melacak jarak jauh master cabang (atau apapun default cabang yang disebut) di server anda kloning dari.
Menjalankan git pull` umumnya mengambil data dari server anda awalnya kloning dari dan secara otomatis mencoba untuk bergabung ke dalam kode yang anda kerjakan saat ini.

[[_pushing_remotes]]
==== Mendorong untuk Remote Anda

Bila anda memiliki proyek anda pada titik yang anda ingin berbagi, anda harus mendorong hulu.
Perintah untuk ini adalah sederhana: `git push [remote-nama] [branch-name]`.(((git perintah, push)))
Jika anda ingin mendorong anda menguasai cabang ke `asal` server (sekali lagi, kloning umumnya set up baik dari nama-nama tersebut untuk anda secara otomatis), maka anda dapat menjalankan ini untuk mendorong setiap melakukan anda sudah melakukan back up ke server:

[source,console]
----
$ git push origin master
----

Perintah ini hanya bekerja jika anda kloning dari server yang anda memiliki akses tulis dan jika tidak ada yang mendorong untuk sementara ini.
Jika anda dan orang lain clone pada waktu yang sama dan mereka mendorong hulu dan kemudian anda menekan hulu, push benar akan ditolak.
Anda akan memiliki untuk menarik mereka bekerja terlebih dahulu dan memasukkan ke anda sebelum anda akan diizinkan untuk mendorong.
Lihat <<_git_branching>> untuk informasi lebih rinci tentang cara push ke remote server.

[[_inspecting_remote]]
==== Inspecting a Remote

Jika anda ingin melihat informasi lebih lanjut tentang tertentu remote, anda dapat menggunakan git remote menunjukkan [remote-nama]` perintah.(((git perintah, remote)))
Jika anda menjalankan perintah ini dengan nama pendek, seperti `asal`, anda mendapatkan sesuatu seperti ini:

[source,console]
----
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
----

Ini daftar URL untuk remote repositori serta cabang pelacakan informasi.
Perintah membantu memberitahu anda bahwa jika anda berada di cabang master dan anda menjalankan git pull`, itu akan secara otomatis bergabung dalam menguasai cabang pada remote setelah itu mengambil semua remote referensi.
Hal ini juga berisi daftar semua remote referensi itu telah ditarik ke bawah.

Itu adalah contoh sederhana yang mungkin anda temui.
Ketika anda menggunakan Git lebih berat, namun, anda mungkin melihat lebih banyak informasi dari `git remote show`:

[source,console]
----
$ git remote show origin
* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date)
----

Perintah ini menunjukkan yang cabang ini secara otomatis mendorong ke ketika anda menjalankan git push` sementara pada cabang-cabang tertentu.
Hal ini juga menunjukkan anda yang terpencil cabang di server anda belum memiliki, yang terpencil cabang anda yang telah dihapus dari server, dan beberapa cabang yang secara otomatis bergabung ketika anda menjalankan git `menarik`.

==== Menghapus dan Mengganti nama Remote

Jika anda ingin mengganti nama sebuah referensi yang dapat anda jalankan git remote rename` untuk mengubah remote shortname.(((git perintah, remote)))
Misalnya, jika anda ingin mengubah nama `pb` untuk `paul`, anda dapat melakukannya dengan `git remote rename`:

[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----

Hal itu layak menyebutkan bahwa perubahan ini remote branch nama, terlalu.
Apa yang digunakan untuk dapat direferensikan pada `pb/master` sekarang `paul/master`.

Jika anda ingin menghapus sebuah remote untuk beberapa alasan – anda sudah pindah server atau tidak lagi menggunakan sebuah cermin, atau mungkin kontributor tidak berkontribusi lagi – anda dapat menggunakan git remote rm`:

[source,console]
----
$ git remote rm paul
$ git remote
origin
----
